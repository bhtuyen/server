// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String         @id @default(uuid()) @db.Char(36)
  name         String         @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  avatar       String?        @db.VarChar(255)
  role         String         @default("Employee") @db.VarChar(50)
  phone        String         @db.VarChar(50)
  orders       Order[]
  employees    Account[]      @relation("OwnerEmployee")
  owner        Account?       @relation("OwnerEmployee", fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  ownerId      String?        @db.Char(36)
  isVerified   Boolean?       @default(false)
  refreshToken RefreshToken[]
  sockets      Socket[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Dish {
  id            String         @id @default(uuid()) @db.Char(36)
  name          String         @db.VarChar(255)
  price         Decimal?       @db.Decimal(10, 4)
  description   String?        @db.Text
  image         String?        @db.VarChar(255)
  status        DishStatus     @default(Available)
  category      DishCategory   @default(Paid)
  options       String?        @db.Text
  dishSnapshots DishSnapshot[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  group         DishGroup      @relation(fields: [groupId], references: [id])
  groupId       String         @db.Char(36)
}

model DishSnapshot {
  id          String       @id @default(uuid()) @db.Char(36)
  name        String       @db.VarChar(255)
  price       Decimal?     @db.Decimal(10, 4)
  description String?      @db.Text
  image       String?      @db.VarChar(255)
  status      DishStatus   @default(Available)
  category    DishCategory @default(Paid)
  options     String?      @db.Text
  dishId      String?      @db.Char(36)
  dish        Dish?        @relation(fields: [dishId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now())
  order       Order?
  group       DishGroup    @relation(fields: [groupId], references: [id])
  groupId     String       @db.Char(36)
}

model DishGroup {
  id             String         @id @default(uuid()) @db.Char(36)
  name           String         @unique @db.VarChar(255)
  code           String         @unique @db.VarChar(50)
  dishes         Dish[]
  disheSnapshots DishSnapshot[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Table {
  number    String   @id @db.VarChar(50)
  capacity  Int
  orders    Order[]
  guests    Guest[]
  status    String   @default("Available") @db.VarChar(50)
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String       @id @default(uuid())
  guestId        String?      @db.Char(36)
  guest          Guest?       @relation(fields: [guestId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  table          Table?       @relation(fields: [tableNumber], references: [number], onDelete: SetNull, onUpdate: NoAction)
  tableNumber    String?      @db.VarChar(50)
  dishSnapshot   DishSnapshot @relation(fields: [dishSnapshotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dishSnapshotId String       @unique @db.Char(36)
  options        String?      @db.Text
  quantity       Int
  orderHandler   Account?     @relation(fields: [orderHandlerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  orderHandlerId String?      @db.Char(36)
  status         String       @default("Pending") @db.VarChar(50)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model RefreshToken {
  token     String   @id @db.VarChar(255)
  accountId String   @db.Char(36)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Guest {
  id                    String    @id @default(uuid()) @db.Char(36)
  name                  String    @db.VarChar(255)
  table                 Table?    @relation(fields: [tableNumber], references: [number], onDelete: SetNull, onUpdate: NoAction)
  tableNumber           String?   @db.VarChar(50)
  orders                Order[]
  refreshToken          String?   @db.VarChar(255)
  refreshTokenExpiresAt DateTime?
  sockets               Socket[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Socket {
  socketId  String   @id @default(uuid()) @db.Char(36)
  accountId String?  @unique @db.Char(36)
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  guestId   String?  @unique @db.Char(36)
  guest     Guest?   @relation(fields: [guestId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

enum DishStatus {
  Available
  Unavailable
  Hidden
}

enum DishCategory {
  Buffet
  Paid
}
