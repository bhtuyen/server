// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String   @id @default(uuid()) @map("account_id") @db.Char(36)
  name       String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  avatar     String?  @db.VarChar(255)
  role       Role     @default(Employee)
  phone      String   @db.VarChar(50)
  isVerified Boolean  @default(false) @map("is_verified") @db.Bit(1)
  createdAt  DateTime@default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt  DateTime @updatedAt @map("updated_at") @db.DateTime()

  employees Account[] @relation("OwnerEmployee")

  owner   Account? @relation("OwnerEmployee", fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  ownerId String?  @map("owner_id") @db.Char(36)

  orders Order[]

  refreshToken RefreshToken[]

  sockets Socket[]

  @@map("account")
}

model Dish {
  id          String       @id @default(uuid()) @map("dish_id") @db.Char(36)
  name        String       @map("dish_name") @db.VarChar(255)
  price       Decimal?     @db.Decimal(18, 4)
  description String?      @db.Text
  image       String?      @db.VarChar(255)
  status      DishStatus   @default(Available)
  category    DishCategory @default(Paid)
  options     String?      @db.Text
  createdAt   DateTime    @default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.DateTime()

  groupId String    @map("group_id") @db.Char(36)
  group   DishGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  dishSnapshots DishSnapshot[]

  dishes DishCombo[] @relation("Combo")
  combos DishCombo[] @relation("Dish")

  @@map("dish")
}

model DishSnapshot {
  id          String       @id @default(uuid()) @map("snapshot_id") @db.Char(36)
  name        String       @db.VarChar(255)
  price       Decimal?     @db.Decimal(18, 4)
  description String?      @db.Text
  image       String?      @db.VarChar(255)
  status      DishStatus   @default(Available)
  category    DishCategory @default(Paid)
  options     String?      @db.Text
  createdAt   DateTime    @default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.DateTime()

  order  Order?
  dishId String @map("dish_id") @db.Char(36)
  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("dish_snapshot")
}

model DishCombo {
  dishId   String @map("dish_id") @db.Char(36)
  comboId  String @map("combo_id") @db.Char(36)
  quantity Int    @default(1) @db.Int()

  dish  Dish @relation("Dish", fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  combo Dish @relation("Combo", fields: [comboId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([dishId, comboId])
  @@map("dish_combo")
}

model DishGroup {
  id        String   @id @default(uuid()) @map("group_id") @db.Char(36)
  name      String   @unique @map("group_name") @db.VarChar(255)
  sortOrder Int      @default(0) @map("sort_order") @db.Int()
  dishes    Dish[]
  createdAt DateTime@default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime()

  @@map("dish_group")
}

model Table {
  id            String        @id @default(uuid()) @map("table_id") @db.Char(36)
  number        String        @unique @map("table_number") @db.VarChar(50)
  paymentStatus PaymentStatus @default(Unpaid)
  capacity      Int           @default(1) @db.Int()
  status        TableStatus   @default(Available)
  token         String        @db.VarChar(255)
  createdAt     DateTime     @default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.DateTime()

  orders Order[]
  guests Guest[]

  @@map("table")
}

model Order {
  id        String      @id @default(uuid()) @map("order_id") @db.Char(36)
  options   String?     @db.Text
  quantity  Int         @db.Int()
  status    OrderStatus @default(Pending)
  createdAt DateTime   @default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt DateTime    @updatedAt @map("updated_at") @db.DateTime()

  guestId String? @map("guest_id") @db.Char(36)
  guest   Guest?  @relation(fields: [guestId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  table       Table  @relation(fields: [tableNumber], references: [number], onDelete: NoAction, onUpdate: Cascade)
  tableNumber String @map("table_number") @db.VarChar(50)
  token       String @db.VarChar(255)

  orderHandlerId String?  @map("order_handler_id") @db.Char(36)
  orderHandler   Account? @relation(fields: [orderHandlerId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  dishSnapshotId String       @unique @map("dish_snapshot_id") @db.Char(36)
  dishSnapshot   DishSnapshot @relation(fields: [dishSnapshotId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order")
}

model RefreshToken {
  token     String   @id @db.VarChar(500)
  expiresAt DateTime @map("expires_at") @db.DateTime()
  createdAt DateTime@default(dbgenerated("now()")) @map("created_at") @db.DateTime()

  accountId String  @map("account_id") @db.Char(36)
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("refresh_token")
}

model Guest {
  id           String    @id @default(uuid()) @map("guest_id") @db.Char(36)
  refreshToken String?   @unique @map("refresh_token") @db.VarChar(500)
  expiredAt    DateTime? @map("expired_at") @db.DateTime()
  createdAt    DateTime  @default(dbgenerated("now()")) @map("created_at") @db.DateTime()
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.DateTime()

  tableNumber String @map("table_number") @db.VarChar(50)
  table       Table  @relation(fields: [tableNumber], references: [number], onDelete: NoAction, onUpdate: Cascade)
  token       String @db.VarChar(255)

  orders Order[]

  sockets Socket[]

  @@map("guest")
}

model Socket {
  socketId String @id @default(uuid()) @map("socket_id") @db.Char(36)

  guestId String? @unique @map("guest_id") @db.Char(36)
  guest   Guest?  @relation(fields: [guestId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  accountId String?  @unique @map("account_id") @db.Char(36)
  account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("socket")
}

model Transaction {
  id                 String   @id @default(uuid()) @map("transaction_id") @db.Char(36)
  idSePay            Int      @map("id_sepay") @db.Int()
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime@default(dbgenerated("now()")) @map("transaction_date") @db.DateTime()
  accountNumber      String?  @map("account_number") @db.VarChar(100)
  subAccount         String?  @map("sub_account") @db.VarChar(250)
  amountIn           Decimal  @default(0) @map("amount_in") @db.Decimal(18, 4)
  amountOut          Decimal  @default(0) @map("amount_out") @db.Decimal(18, 4)
  accumulated        Decimal  @default(0) @map("accumulated") @db.Decimal(18, 4)
  code               String?  @map("code") @db.VarChar(250)
  transactionContent String?  @map("transaction_content") @db.Text
  referenceNumber    String?  @map("reference_number") @db.VarChar(255)
  body               String?  @map("body") @db.Text
  createdAt          DateTime@default(dbgenerated("now()")) @map("created_at") @db.DateTime()

  @@map("transaction")
}

enum DishStatus {
  Available
  Unavailable
  Hidden
}

enum DishCategory {
  Buffet
  Paid
  ComboBuffet
  ComboPaid
}

enum Role {
  Owner
  Employee
  Guest
}

enum TableStatus {
  Available
  Hidden
  Reserved
}

enum OrderStatus {
  Pending
  Processing
  Rejected
  Delivered
  Paid
}

enum PaymentStatus {
  Unpaid
  Paid
  Cancelled
}
